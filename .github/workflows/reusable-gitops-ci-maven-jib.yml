name: Reusable GitOps CI Maven Jib
on:
  workflow_call:
    inputs:
      dotenv-path:
        required: false
        type: string
        default: '.github/.env'
      always-publish:
        required: false
        type: boolean
        default: true
      always-scan:
        required: false
        type: boolean
        default: true
      ci-build-args:
        required: false
        type: string
        default: 'clean install'  
      java-version:
        required: false
        type: string
        default: '17'
      jib-from-image:
        required: false
        type: string
        default: 'eclipse-temurin:17-jre-jammy'
      jfrog-cli-version:
        required: false
        type: string
        default: 'latest'
      jfrog-ci-watch:
        required: false
        type: string
        default: 'ci-build-scan'
      jfrog-ci-fail:
        required: false
        type: boolean
        default: true
      sonar-qualitygate-wait:
        required: false
        type: boolean
        default: false
      sonar-scan-dir:
        required: false
        type: string
        default: 'target/classes'
      timeout-minutes:
        required: false
        type: number
        default: 30
    secrets:
      ARTIFACTORY_USERNAME:
        required: true
      ARTIFACTORY_API_KEY:
        required: true
      GITHUB_CI_APP_ID:
        required: true
      GITHUB_CI_APP_PRIVATE_KEY:
        required: true
      SONAR_TOKEN:
        required: true
      DT_TOKEN:
        required: false
env:
  DT_TOKEN: ${{ secrets.DT_TOKEN }}
  PUBLISH_IMAGE: true
  # PUBLISH_IMAGE: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || inputs.always-publish }}
  SCAN_CODE: ${{ (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'pull_request' || inputs.always-scan }}
jobs:
  build-and-test:
    timeout-minutes: ${{ inputs.timeout-minutes }}
    runs-on: ubuntu-24.04
    steps:
    - name: Checkout
      id: checkout
      uses: actions/checkout@v4
      with:
        #https://github.community/t/do-expressions-support-ternary-operators-to-change-their-returned-value/18114/4
        fetch-depth: ${{ fromJSON('["1", "0"]') [env.SCAN_CODE == 'true'] }}
    - name: Read Project Properties
      id: props
      uses: falti/dotenv-action@v1.0.4
      with:
        path: ${{ inputs.dotenv-path}}
        log-variables: true
    - name: Configure Workflow Environment
      id: config
      uses: mahajanatul525/github-actions-library/configure-workflow@master
      with:
        team: ${{ steps.props.outputs.team }}
        keysystem: ${{ steps.props.outputs.keysystem }}
        application-name: ${{ steps.props.outputs.application_name}} 
        docker-namespace: ${{ steps.props.outputs.docker_namespace }}
        artifactory-username: mahajanatul525
        artifactory-api-key: Matul_525
        deployment-repo: ${{ steps.props.outputs.deployment_repo}}
    - name: Setup Java
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ inputs.java-version}}
        cache: maven
    - name: Configure Maven Environment
      id: configure-maven
      uses: mahajanatul525/github-actions-library/configure-maven@master
      with:
        repository-base: https://trialt6dmgx.jfrog.io
        mirror-url: https://trialt6dmgx.jfrog.io/artifactory/aigi-dstores-maven-dev
        release-url: https://trialt6dmgx.jfrog.io/artifactory/aigi-dstores-maven-release-local/
        snapshot-url: https://trialt6dmgx.jfrog.io/artifactory/aigi-dstores-maven-snapshot-local/
        username: ${{ steps.config.outputs.artifactory-username}}
        password: ${{ steps.config.outputs.artifactory-api-key}}
    - name: Build & Test
      id: build-and-test
      run: | 
        mvn -B -V -e -Dstyle.color=always ${{ inputs.ci-build-args }} jib:dockerBuild \
        -Djib.container.labels="keysystem=${{ steps.config.outputs.docker-label-keysystem }}, owner=${{ steps.config.outputs.docker-label-owner }}" \
        -Djib.from.image="eclipse-temurin:17-jre-jammy" \
        -Djib.to.image="trialt6dmgx.jfrog.io/aigi-docker-snapshot-local/fe-api:latest"
    - name: Install JFrog CLI
      if: ${{ success() && env.SCAN_CODE == 'true'}}
      uses: jfrog/setup-jfrog-cli@v4.4.2
      with:
        version: ${{ inputs.jfrog-cli-version }}

    - name: Publish Image
      if: ${{ success() && env.PUBLISH_IMAGE == 'true'}}
      id: publish-image
      env:
        SKOPEO ARGS: --src-creds mahajanatul525:Matul_525 --dest-creds mahajanatul525:Matul_525
        DOCKER SNAPSHOT_SHA_TAG: trialt6dmgx.jfrog.io/aigi-dstores-docker-snapshot-local/arc/dstores/fe/fe-api:${{ steps.config.outputs.docker-sha-tag}}
        DOCKER SNAPSHOT_REF_TAG: trialt6dmgx.jfrog.io/aigi-dstores-docker-snapshot-local/arc/dstores/fe/fe-api:${{ steps.config.outputs.docker-ref-tag }}
        DOCKER SNAPSHOT BUILD_TAG: trialt6dmgx.jfrog.io/aigi-dstores-docker-release-local/arc/dstores/fe/fe-api:${{ steps.config.outputs.docker-build-tag}}
      run: |
        skopeo copy docker-daemon: $DOCKER_SNAPSHOT_SHA_TAG docker://$DOCKER_SNAPSHOT_SHA_TAG $SKOPEO ARGS
        skopeo copy docker://$DOCKER_SNAPSHOT_SHA_TAG docker://$DOCKER_SNAPSHOT_REF_TAG $SKOPEO_ARGS
        skopeo copy docker://$DOCKER_SNAPSHOT_SHA_TAG docker://$DOCKER_SNAPSHOT_BUILD_TAG $SKOPEO_ARGS
    - name: Generate Deployment Token
      if: ${{ success() && env.PUBLISH_IMAGE=='true' }}
      uses: tibdex/github-app-token@v2
      id: generate-deployment-token
      with:
        app_id: ${{ secrets.GITHUB_CI_APP_ID}}
        private_key: ${{ secrets.GITHUB_CI_APP_PRIVATE_KEY }}
        repository: ${{ steps.props.outputs.deployment_repo}}
    - name: Notify Deployment Repository
      if: ${{ success() && env.PUBLISH_IMAGE == 'true'}}
      uses: peter-evans/repository-dispatch@v2
      id: notify-deployment-repository
      with:
        repository: ${{ steps.props.outputs.deployment_repo}}
        token: ${{ steps.generate-deployment-token.outputs.token }}
        event-type: ci-notification
        client-payload: |
          {
            "github": {
              "team": "${{ steps.props.outputs.team }}",
              "application-name": "${{ steps.props.outputs.application_name}}",
              "repository": "${{ github.repository }}",
              "ref": "${{ github.ref }}"
            }, 
            "image": {
              "base": "${{ steps.config.outputs.docker-snapshot-image-base }}"
              "ref_tag": "${{steps.config.outputs.docker-ref-tag}}",
              "sha_tag": "${{steps.config.outputs.docker-sha-tag}}",
              "build_tag": "${{ steps.config.outputs.docker-build-tag}}"
            }
          }
